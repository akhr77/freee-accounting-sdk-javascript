/**
 * freee API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BadRequestError', 'model/DealsCreateResponse', 'model/DealsIndexResponse', 'model/DealsResponse', 'model/Parameters', 'model/Parameters2', 'model/UnauthorizedError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BadRequestError'), require('../model/DealsCreateResponse'), require('../model/DealsIndexResponse'), require('../model/DealsResponse'), require('../model/Parameters'), require('../model/Parameters2'), require('../model/UnauthorizedError'));
  } else {
    // Browser globals (root is window)
    if (!root.FreeeAccountingClient) {
      root.FreeeAccountingClient = {};
    }
    root.FreeeAccountingClient.DealsApi = factory(root.FreeeAccountingClient.ApiClient, root.FreeeAccountingClient.BadRequestError, root.FreeeAccountingClient.DealsCreateResponse, root.FreeeAccountingClient.DealsIndexResponse, root.FreeeAccountingClient.DealsResponse, root.FreeeAccountingClient.Parameters, root.FreeeAccountingClient.Parameters2, root.FreeeAccountingClient.UnauthorizedError);
  }
}(this, function(ApiClient, BadRequestError, DealsCreateResponse, DealsIndexResponse, DealsResponse, Parameters, Parameters2, UnauthorizedError) {
  'use strict';

  /**
   * Deals service.
   * @module api/DealsApi
   * @version v0.0.2
   */

  /**
   * Constructs a new DealsApi. 
   * @alias module:api/DealsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createDeal operation.
     * @callback module:api/DealsApi~createDealCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealsCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 取引（収入／支出）の作成
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/Parameters2} opts.parameters 取引（収入／支出）の作成
     * @param {module:api/DealsApi~createDealCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealsCreateResponse}
     */
    this.createDeal = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['parameters'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = DealsCreateResponse;

      return this.apiClient.callApi(
        '/deals', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeal operation.
     * @callback module:api/DealsApi~getDealCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 取引（収入／支出）の取得
     * 
     * @param {Number} companyId 事業所ID
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.accruals 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）
     * @param {module:api/DealsApi~getDealCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealsResponse}
     */
    this.getDeal = function(companyId, id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getDeal");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeal");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'company_id': companyId,
        'accruals': opts['accruals'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = DealsResponse;

      return this.apiClient.callApi(
        '/deals/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeals operation.
     * @callback module:api/DealsApi~getDealsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealsIndexResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 取引（収入／支出）一覧の取得
     * 
     * @param {Number} companyId 事業所ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.partnerId 取引先IDで絞込
     * @param {module:model/String} opts.status 決済状況で絞込 (未決済: unsettled, 完了: settled)
     * @param {module:model/String} opts.type 収支区分 (収入: income, 支出: expense)
     * @param {String} opts.startIssueDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param {String} opts.endIssueDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param {String} opts.startDueDate 支払期日で絞込：開始日(yyyy-mm-dd)
     * @param {String} opts.endDueDate 支払期日で絞込：終了日(yyyy-mm-dd)
     * @param {Number} opts.offset 取得レコードのオフセット (デフォルト: 0)
     * @param {Number} opts.limit 取得レコードの件数 (デフォルト: 20, 最大: 100) 
     * @param {module:model/String} opts.registeredFrom 取引登録元アプリで絞込（me: 本APIを叩くアプリ自身から登録した取引のみ）
     * @param {module:model/String} opts.accruals 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）
     * @param {module:api/DealsApi~getDealsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealsIndexResponse}
     */
    this.getDeals = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getDeals");
      }


      var pathParams = {
      };
      var queryParams = {
        'company_id': companyId,
        'partner_id': opts['partnerId'],
        'status': opts['status'],
        'type': opts['type'],
        'start_issue_date': opts['startIssueDate'],
        'end_issue_date': opts['endIssueDate'],
        'start_due_date': opts['startDueDate'],
        'end_due_date': opts['endDueDate'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'registered_from': opts['registeredFrom'],
        'accruals': opts['accruals'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = DealsIndexResponse;

      return this.apiClient.callApi(
        '/deals', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeal operation.
     * @callback module:api/DealsApi~updateDealCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 取引（収入／支出）の更新
     * 
     * @param {Number} id 取引ID
     * @param {Object} opts Optional parameters
     * @param {module:model/Parameters} opts.parameters 取引（収入／支出）の更新
     * @param {module:api/DealsApi~updateDealCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealsResponse}
     */
    this.updateDeal = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['parameters'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDeal");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = DealsResponse;

      return this.apiClient.callApi(
        '/deals/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
