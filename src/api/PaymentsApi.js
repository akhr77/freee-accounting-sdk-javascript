/**
 * freee API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BadRequestError', 'model/DealPaymentParams', 'model/DealsResponse', 'model/Parameter2', 'model/UnauthorizedError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BadRequestError'), require('../model/DealPaymentParams'), require('../model/DealsResponse'), require('../model/Parameter2'), require('../model/UnauthorizedError'));
  } else {
    // Browser globals (root is window)
    if (!root.FreeeAccountingClient) {
      root.FreeeAccountingClient = {};
    }
    root.FreeeAccountingClient.PaymentsApi = factory(root.FreeeAccountingClient.ApiClient, root.FreeeAccountingClient.BadRequestError, root.FreeeAccountingClient.DealPaymentParams, root.FreeeAccountingClient.DealsResponse, root.FreeeAccountingClient.Parameter2, root.FreeeAccountingClient.UnauthorizedError);
  }
}(this, function(ApiClient, BadRequestError, DealPaymentParams, DealsResponse, Parameter2, UnauthorizedError) {
  'use strict';

  /**
   * Payments service.
   * @module api/PaymentsApi
   * @version v0.0.1
   */

  /**
   * Constructs a new PaymentsApi. 
   * @alias module:api/PaymentsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createDealPayment operation.
     * @callback module:api/PaymentsApi~createDealPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 取引（収入／支出）の支払行作成
     * 
     * @param {Number} id 取引ID
     * @param {module:model/DealPaymentParams} parameters 取引（収入／支出）の支払行作成
     * @param {module:api/PaymentsApi~createDealPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealsResponse}
     */
    this.createDealPayment = function(id, parameters, callback) {
      var postBody = parameters;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createDealPayment");
      }

      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling createDealPayment");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = DealsResponse;

      return this.apiClient.callApi(
        '/deals/{id}/payments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the destroyDealPayment operation.
     * @callback module:api/PaymentsApi~destroyDealPaymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 取引（収入／支出）の支払行削除
     * 
     * @param {Number} id 取引ID
     * @param {Number} paymentId 決済ID
     * @param {Object} opts Optional parameters
     * @param {module:model/Parameter2} opts.parameter 取引（収入／支出）の支払行削除
     * @param {module:api/PaymentsApi~destroyDealPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.destroyDealPayment = function(id, paymentId, opts, callback) {
      opts = opts || {};
      var postBody = opts['parameter'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling destroyDealPayment");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling destroyDealPayment");
      }


      var pathParams = {
        'id': id,
        'payment_id': paymentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/deals/{id}/payments/{payment_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDealPayment operation.
     * @callback module:api/PaymentsApi~updateDealPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 取引（収入／支出）の支払行更新
     * 
     * @param {Number} id 取引ID
     * @param {Number} paymentId 決済ID
     * @param {module:model/DealPaymentParams} parameters 取引（収入／支出）の支払行更新
     * @param {module:api/PaymentsApi~updateDealPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealsResponse}
     */
    this.updateDealPayment = function(id, paymentId, parameters, callback) {
      var postBody = parameters;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDealPayment");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling updateDealPayment");
      }

      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling updateDealPayment");
      }


      var pathParams = {
        'id': id,
        'payment_id': paymentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = DealsResponse;

      return this.apiClient.callApi(
        '/deals/{id}/payments/{payment_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
