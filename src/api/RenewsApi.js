/**
 * freee API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BadRequestError', 'model/Parameter1', 'model/RenewsCreateParams', 'model/RenewsResponse', 'model/RenewsUpdateParams', 'model/UnauthorizedError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BadRequestError'), require('../model/Parameter1'), require('../model/RenewsCreateParams'), require('../model/RenewsResponse'), require('../model/RenewsUpdateParams'), require('../model/UnauthorizedError'));
  } else {
    // Browser globals (root is window)
    if (!root.FreeeAccountingClient) {
      root.FreeeAccountingClient = {};
    }
    root.FreeeAccountingClient.RenewsApi = factory(root.FreeeAccountingClient.ApiClient, root.FreeeAccountingClient.BadRequestError, root.FreeeAccountingClient.Parameter1, root.FreeeAccountingClient.RenewsCreateParams, root.FreeeAccountingClient.RenewsResponse, root.FreeeAccountingClient.RenewsUpdateParams, root.FreeeAccountingClient.UnauthorizedError);
  }
}(this, function(ApiClient, BadRequestError, Parameter1, RenewsCreateParams, RenewsResponse, RenewsUpdateParams, UnauthorizedError) {
  'use strict';

  /**
   * Renews service.
   * @module api/RenewsApi
   * @version v0.0.1
   */

  /**
   * Constructs a new RenewsApi. 
   * @alias module:api/RenewsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createDealRenew operation.
     * @callback module:api/RenewsApi~createDealRenewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RenewsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 取引（収入／支出）に対する+更新の作成
     * 
     * @param {Number} id 取引ID
     * @param {module:model/RenewsCreateParams} parameters 取引（収入／支出）に対する+更新の情報
     * @param {module:api/RenewsApi~createDealRenewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RenewsResponse}
     */
    this.createDealRenew = function(id, parameters, callback) {
      var postBody = parameters;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createDealRenew");
      }

      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling createDealRenew");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = RenewsResponse;

      return this.apiClient.callApi(
        '/deals/{id}/renews', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDealRenew operation.
     * @callback module:api/RenewsApi~deleteDealRenewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RenewsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 取引（収入／支出）の+更新の削除
     * 
     * @param {Number} id 取引ID
     * @param {Number} renewId +更新ID
     * @param {Object} opts Optional parameters
     * @param {module:model/Parameter1} opts.parameter 取引（収入／支出）に対する+更新の情報
     * @param {module:api/RenewsApi~deleteDealRenewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RenewsResponse}
     */
    this.deleteDealRenew = function(id, renewId, opts, callback) {
      opts = opts || {};
      var postBody = opts['parameter'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDealRenew");
      }

      // verify the required parameter 'renewId' is set
      if (renewId === undefined || renewId === null) {
        throw new Error("Missing the required parameter 'renewId' when calling deleteDealRenew");
      }


      var pathParams = {
        'id': id,
        'renew_id': renewId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = RenewsResponse;

      return this.apiClient.callApi(
        '/deals/{id}/renews/{renew_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDealRenew operation.
     * @callback module:api/RenewsApi~updateDealRenewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RenewsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 取引（収入／支出）の+更新の更新
     * 
     * @param {Number} id 取引ID
     * @param {Number} renewId +更新ID
     * @param {module:model/RenewsUpdateParams} parameters +更新の更新情報
     * @param {module:api/RenewsApi~updateDealRenewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RenewsResponse}
     */
    this.updateDealRenew = function(id, renewId, parameters, callback) {
      var postBody = parameters;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDealRenew");
      }

      // verify the required parameter 'renewId' is set
      if (renewId === undefined || renewId === null) {
        throw new Error("Missing the required parameter 'renewId' when calling updateDealRenew");
      }

      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling updateDealRenew");
      }


      var pathParams = {
        'id': id,
        'renew_id': renewId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = RenewsResponse;

      return this.apiClient.callApi(
        '/deals/{id}/renews/{renew_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
