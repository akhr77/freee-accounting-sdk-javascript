/**
 * freee API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BadRequestError', 'model/Parameter6', 'model/SegmentTagParams', 'model/SegmentTagsIndexResponse', 'model/SegmentTagsResponse', 'model/UnauthorizedError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BadRequestError'), require('../model/Parameter6'), require('../model/SegmentTagParams'), require('../model/SegmentTagsIndexResponse'), require('../model/SegmentTagsResponse'), require('../model/UnauthorizedError'));
  } else {
    // Browser globals (root is window)
    if (!root.FreeeAccountingClient) {
      root.FreeeAccountingClient = {};
    }
    root.FreeeAccountingClient.SegmentTagsApi = factory(root.FreeeAccountingClient.ApiClient, root.FreeeAccountingClient.BadRequestError, root.FreeeAccountingClient.Parameter6, root.FreeeAccountingClient.SegmentTagParams, root.FreeeAccountingClient.SegmentTagsIndexResponse, root.FreeeAccountingClient.SegmentTagsResponse, root.FreeeAccountingClient.UnauthorizedError);
  }
}(this, function(ApiClient, BadRequestError, Parameter6, SegmentTagParams, SegmentTagsIndexResponse, SegmentTagsResponse, UnauthorizedError) {
  'use strict';

  /**
   * SegmentTags service.
   * @module api/SegmentTagsApi
   * @version v0.0.2
   */

  /**
   * Constructs a new SegmentTagsApi. 
   * @alias module:api/SegmentTagsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createSegmentTag operation.
     * @callback module:api/SegmentTagsApi~createSegmentTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SegmentTagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * セグメントの作成
     * 
     * @param {module:model/SegmentTagParams} parameters セグメントタグの作成
     * @param {Number} segmentId セグメントID
     * @param {module:api/SegmentTagsApi~createSegmentTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SegmentTagsResponse}
     */
    this.createSegmentTag = function(parameters, segmentId, callback) {
      var postBody = parameters;

      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling createSegmentTag");
      }

      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling createSegmentTag");
      }


      var pathParams = {
        'segment_id': segmentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = SegmentTagsResponse;

      return this.apiClient.callApi(
        '/segments/{segment_id}/tags', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the destroySegmentsTag operation.
     * @callback module:api/SegmentTagsApi~destroySegmentsTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * セグメントタグの削除
     * 
     * @param {Number} segmentId セグメントID
     * @param {Number} id セグメントタグID
     * @param {Object} opts Optional parameters
     * @param {module:model/Parameter6} opts.parameter セグメントタグの削除
     * @param {module:api/SegmentTagsApi~destroySegmentsTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.destroySegmentsTag = function(segmentId, id, opts, callback) {
      opts = opts || {};
      var postBody = opts['parameter'];

      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling destroySegmentsTag");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling destroySegmentsTag");
      }


      var pathParams = {
        'segment_id': segmentId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/segments/{segment_id}/tags/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSegmentTags operation.
     * @callback module:api/SegmentTagsApi~getSegmentTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SegmentTagsIndexResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * セグメントタグ一覧の取得
     * 
     * @param {Number} companyId 事業所ID
     * @param {Number} segmentId セグメントID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset 取得レコードのオフセット (デフォルト: 0)
     * @param {Number} opts.limit 取得レコードの件数 (デフォルト: 20, 最大: 500) 
     * @param {module:api/SegmentTagsApi~getSegmentTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SegmentTagsIndexResponse}
     */
    this.getSegmentTags = function(companyId, segmentId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getSegmentTags");
      }

      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling getSegmentTags");
      }


      var pathParams = {
        'segment_id': segmentId
      };
      var queryParams = {
        'company_id': companyId,
        'offset': opts['offset'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = SegmentTagsIndexResponse;

      return this.apiClient.callApi(
        '/segments/{segment_id}/tags', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSegmentTag operation.
     * @callback module:api/SegmentTagsApi~updateSegmentTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SegmentTagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * セグメントタグの更新
     * 
     * @param {module:model/SegmentTagParams} parameters セグメントタグの作成
     * @param {Number} segmentId セグメントID
     * @param {Number} id セグメントタグID
     * @param {module:api/SegmentTagsApi~updateSegmentTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SegmentTagsResponse}
     */
    this.updateSegmentTag = function(parameters, segmentId, id, callback) {
      var postBody = parameters;

      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling updateSegmentTag");
      }

      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling updateSegmentTag");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSegmentTag");
      }


      var pathParams = {
        'segment_id': segmentId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = SegmentTagsResponse;

      return this.apiClient.callApi(
        '/segments/{segment_id}/tags/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
