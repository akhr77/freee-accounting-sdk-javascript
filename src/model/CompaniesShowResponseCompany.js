/**
 * freee API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.FreeeAccountingClient) {
      root.FreeeAccountingClient = {};
    }
    root.FreeeAccountingClient.CompaniesShowResponseCompany = factory(root.FreeeAccountingClient.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The CompaniesShowResponseCompany model module.
   * @module model/CompaniesShowResponseCompany
   * @version v0.0.1
   */

  /**
   * Constructs a new <code>CompaniesShowResponseCompany</code>.
   * @alias module:model/CompaniesShowResponseCompany
   * @class
   * @param id {Number} 事業所ID
   * @param displayName {String} 事業所名
   * @param taxAtSourceCalcType {Number} 源泉徴収税計算（0: 消費税を含める、1: 消費税を含めない）
   * @param corporateNumber {String} 法人番号 (半角数字13桁、法人のみ)
   * @param txnNumberFormat {module:model/CompaniesShowResponseCompany.TxnNumberFormatEnum} 仕訳番号形式（not_used: 使用しない、digits: 数字（例：5091824）、alnum: 英数字（例：59J0P））
   * @param privateSettlement {Boolean} プライベート資金/役員資金（false: 使用しない、true: 使用する）
   * @param minusFormat {Number} マイナスの表示方法（0: -、 1: △）
   * @param role {module:model/CompaniesShowResponseCompany.RoleEnum} ユーザーの権限
   * @param phone1 {String} 電話番号１
   * @param zipcode {String} 郵便番号
   * @param prefectureCode {Number} 都道府県コード（0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野お、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄
   * @param streetName1 {String} 市区町村・番地
   * @param streetName2 {String} 建物名・部屋番号など
   * @param invoiceLayout {Number} レイアウト(0: レイアウト1, 1:レイアウト2, 3:封筒1, 4:レイアウト3(繰越金額欄あり), 5: 封筒2(繰越金額欄あり))
   * @param invoiceStyle {Number} スタイル(0: クラシック, 1: モダン)
   * @param amountFraction {Number} 金額端数処理方法（0: 切り捨て、1: 切り上げ、2: 四捨五入）
   * @param industryClass {module:model/CompaniesShowResponseCompany.IndustryClassEnum} 種別（agriculture_forestry_fisheries_ore: 農林水産業/鉱業、construction: 建設、manufacturing_processing: 製造/加工、it: IT、transportation_logistics: 運輸/物流、retail_wholesale: 小売/卸売、finance_insurance: 金融/保険、real_estate_rental: 不動産/レンタル、profession: 士業/学術/専門技術サービス、design_production: デザイン/制作、food: 飲食、leisure_entertainment: レジャー/娯楽、lifestyle: 生活関連サービス、education: 教育/学習支援、medical_welfare: 医療/福祉、other_services: その他サービス、other: その他）
   * @param industryCode {module:model/CompaniesShowResponseCompany.IndustryCodeEnum} コード（transport_delivery: 輸送業/配送業、delivery: バイク便等の配達業、other_transportation_logistics: その他の運輸業、物流業）
   * @param workflowSetting {module:model/CompaniesShowResponseCompany.WorkflowSettingEnum} 仕訳承認フロー（enable: 有効、 disable: 無効）
   */
  var exports = function(id, displayName, taxAtSourceCalcType, corporateNumber, txnNumberFormat, privateSettlement, minusFormat, role, phone1, zipcode, prefectureCode, streetName1, streetName2, invoiceLayout, invoiceStyle, amountFraction, industryClass, industryCode, workflowSetting) {
    var _this = this;

    _this['id'] = id;
    _this['display_name'] = displayName;
    _this['tax_at_source_calc_type'] = taxAtSourceCalcType;
    _this['corporate_number'] = corporateNumber;
    _this['txn_number_format'] = txnNumberFormat;

    _this['private_settlement'] = privateSettlement;
    _this['minus_format'] = minusFormat;
    _this['role'] = role;
    _this['phone1'] = phone1;
    _this['zipcode'] = zipcode;
    _this['prefecture_code'] = prefectureCode;
    _this['street_name1'] = streetName1;
    _this['street_name2'] = streetName2;
    _this['invoice_layout'] = invoiceLayout;
    _this['invoice_style'] = invoiceStyle;
    _this['amount_fraction'] = amountFraction;
    _this['industry_class'] = industryClass;
    _this['industry_code'] = industryCode;
    _this['workflow_setting'] = workflowSetting;
  };

  /**
   * Constructs a <code>CompaniesShowResponseCompany</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CompaniesShowResponseCompany} obj Optional instance to populate.
   * @return {module:model/CompaniesShowResponseCompany} The populated <code>CompaniesShowResponseCompany</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('display_name')) {
        obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
      }
      if (data.hasOwnProperty('tax_at_source_calc_type')) {
        obj['tax_at_source_calc_type'] = ApiClient.convertToType(data['tax_at_source_calc_type'], 'Number');
      }
      if (data.hasOwnProperty('corporate_number')) {
        obj['corporate_number'] = ApiClient.convertToType(data['corporate_number'], 'String');
      }
      if (data.hasOwnProperty('txn_number_format')) {
        obj['txn_number_format'] = ApiClient.convertToType(data['txn_number_format'], 'String');
      }
      if (data.hasOwnProperty('default_wallet_account_id')) {
        obj['default_wallet_account_id'] = ApiClient.convertToType(data['default_wallet_account_id'], 'Number');
      }
      if (data.hasOwnProperty('private_settlement')) {
        obj['private_settlement'] = ApiClient.convertToType(data['private_settlement'], 'Boolean');
      }
      if (data.hasOwnProperty('minus_format')) {
        obj['minus_format'] = ApiClient.convertToType(data['minus_format'], 'Number');
      }
      if (data.hasOwnProperty('role')) {
        obj['role'] = ApiClient.convertToType(data['role'], 'String');
      }
      if (data.hasOwnProperty('phone1')) {
        obj['phone1'] = ApiClient.convertToType(data['phone1'], 'String');
      }
      if (data.hasOwnProperty('zipcode')) {
        obj['zipcode'] = ApiClient.convertToType(data['zipcode'], 'String');
      }
      if (data.hasOwnProperty('prefecture_code')) {
        obj['prefecture_code'] = ApiClient.convertToType(data['prefecture_code'], 'Number');
      }
      if (data.hasOwnProperty('street_name1')) {
        obj['street_name1'] = ApiClient.convertToType(data['street_name1'], 'String');
      }
      if (data.hasOwnProperty('street_name2')) {
        obj['street_name2'] = ApiClient.convertToType(data['street_name2'], 'String');
      }
      if (data.hasOwnProperty('invoice_layout')) {
        obj['invoice_layout'] = ApiClient.convertToType(data['invoice_layout'], 'Number');
      }
      if (data.hasOwnProperty('invoice_style')) {
        obj['invoice_style'] = ApiClient.convertToType(data['invoice_style'], 'Number');
      }
      if (data.hasOwnProperty('amount_fraction')) {
        obj['amount_fraction'] = ApiClient.convertToType(data['amount_fraction'], 'Number');
      }
      if (data.hasOwnProperty('industry_class')) {
        obj['industry_class'] = ApiClient.convertToType(data['industry_class'], 'String');
      }
      if (data.hasOwnProperty('industry_code')) {
        obj['industry_code'] = ApiClient.convertToType(data['industry_code'], 'String');
      }
      if (data.hasOwnProperty('workflow_setting')) {
        obj['workflow_setting'] = ApiClient.convertToType(data['workflow_setting'], 'String');
      }
    }
    return obj;
  }

  /**
   * 事業所ID
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * 事業所名
   * @member {String} display_name
   */
  exports.prototype['display_name'] = undefined;
  /**
   * 源泉徴収税計算（0: 消費税を含める、1: 消費税を含めない）
   * @member {Number} tax_at_source_calc_type
   */
  exports.prototype['tax_at_source_calc_type'] = undefined;
  /**
   * 法人番号 (半角数字13桁、法人のみ)
   * @member {String} corporate_number
   */
  exports.prototype['corporate_number'] = undefined;
  /**
   * 仕訳番号形式（not_used: 使用しない、digits: 数字（例：5091824）、alnum: 英数字（例：59J0P））
   * @member {module:model/CompaniesShowResponseCompany.TxnNumberFormatEnum} txn_number_format
   */
  exports.prototype['txn_number_format'] = undefined;
  /**
   * 決済口座のデフォルト
   * @member {Number} default_wallet_account_id
   */
  exports.prototype['default_wallet_account_id'] = undefined;
  /**
   * プライベート資金/役員資金（false: 使用しない、true: 使用する）
   * @member {Boolean} private_settlement
   */
  exports.prototype['private_settlement'] = undefined;
  /**
   * マイナスの表示方法（0: -、 1: △）
   * @member {Number} minus_format
   */
  exports.prototype['minus_format'] = undefined;
  /**
   * ユーザーの権限
   * @member {module:model/CompaniesShowResponseCompany.RoleEnum} role
   */
  exports.prototype['role'] = undefined;
  /**
   * 電話番号１
   * @member {String} phone1
   */
  exports.prototype['phone1'] = undefined;
  /**
   * 郵便番号
   * @member {String} zipcode
   */
  exports.prototype['zipcode'] = undefined;
  /**
   * 都道府県コード（0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野お、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄
   * @member {Number} prefecture_code
   */
  exports.prototype['prefecture_code'] = undefined;
  /**
   * 市区町村・番地
   * @member {String} street_name1
   */
  exports.prototype['street_name1'] = undefined;
  /**
   * 建物名・部屋番号など
   * @member {String} street_name2
   */
  exports.prototype['street_name2'] = undefined;
  /**
   * レイアウト(0: レイアウト1, 1:レイアウト2, 3:封筒1, 4:レイアウト3(繰越金額欄あり), 5: 封筒2(繰越金額欄あり))
   * @member {Number} invoice_layout
   */
  exports.prototype['invoice_layout'] = undefined;
  /**
   * スタイル(0: クラシック, 1: モダン)
   * @member {Number} invoice_style
   */
  exports.prototype['invoice_style'] = undefined;
  /**
   * 金額端数処理方法（0: 切り捨て、1: 切り上げ、2: 四捨五入）
   * @member {Number} amount_fraction
   */
  exports.prototype['amount_fraction'] = undefined;
  /**
   * 種別（agriculture_forestry_fisheries_ore: 農林水産業/鉱業、construction: 建設、manufacturing_processing: 製造/加工、it: IT、transportation_logistics: 運輸/物流、retail_wholesale: 小売/卸売、finance_insurance: 金融/保険、real_estate_rental: 不動産/レンタル、profession: 士業/学術/専門技術サービス、design_production: デザイン/制作、food: 飲食、leisure_entertainment: レジャー/娯楽、lifestyle: 生活関連サービス、education: 教育/学習支援、medical_welfare: 医療/福祉、other_services: その他サービス、other: その他）
   * @member {module:model/CompaniesShowResponseCompany.IndustryClassEnum} industry_class
   */
  exports.prototype['industry_class'] = undefined;
  /**
   * コード（transport_delivery: 輸送業/配送業、delivery: バイク便等の配達業、other_transportation_logistics: その他の運輸業、物流業）
   * @member {module:model/CompaniesShowResponseCompany.IndustryCodeEnum} industry_code
   */
  exports.prototype['industry_code'] = undefined;
  /**
   * 仕訳承認フロー（enable: 有効、 disable: 無効）
   * @member {module:model/CompaniesShowResponseCompany.WorkflowSettingEnum} workflow_setting
   */
  exports.prototype['workflow_setting'] = undefined;


  /**
   * Allowed values for the <code>txn_number_format</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TxnNumberFormatEnum = {
    /**
     * value: "not_used"
     * @const
     */
    "not_used": "not_used",
    /**
     * value: "digits"
     * @const
     */
    "digits": "digits",
    /**
     * value: "alnum"
     * @const
     */
    "alnum": "alnum"  };

  /**
   * Allowed values for the <code>role</code> property.
   * @enum {String}
   * @readonly
   */
  exports.RoleEnum = {
    /**
     * value: "admin"
     * @const
     */
    "admin": "admin",
    /**
     * value: "simple_accounting"
     * @const
     */
    "simple_accounting": "simple_accounting",
    /**
     * value: "self_only"
     * @const
     */
    "self_only": "self_only",
    /**
     * value: "read_only"
     * @const
     */
    "read_only": "read_only"  };

  /**
   * Allowed values for the <code>industry_class</code> property.
   * @enum {String}
   * @readonly
   */
  exports.IndustryClassEnum = {
    /**
     * value: ""
     * @const
     */
    "empty": "",
    /**
     * value: "agriculture_forestry_fisheries_ore"
     * @const
     */
    "agriculture_forestry_fisheries_ore": "agriculture_forestry_fisheries_ore",
    /**
     * value: "construction"
     * @const
     */
    "construction": "construction",
    /**
     * value: "manufacturing_processing"
     * @const
     */
    "manufacturing_processing": "manufacturing_processing",
    /**
     * value: "it"
     * @const
     */
    "it": "it",
    /**
     * value: "transportation_logistics"
     * @const
     */
    "transportation_logistics": "transportation_logistics",
    /**
     * value: "retail_wholesale"
     * @const
     */
    "retail_wholesale": "retail_wholesale",
    /**
     * value: "finance_insurance"
     * @const
     */
    "finance_insurance": "finance_insurance",
    /**
     * value: "real_estate_rental"
     * @const
     */
    "real_estate_rental": "real_estate_rental",
    /**
     * value: "profession"
     * @const
     */
    "profession": "profession",
    /**
     * value: "design_production"
     * @const
     */
    "design_production": "design_production",
    /**
     * value: "food"
     * @const
     */
    "food": "food",
    /**
     * value: "lifestyle"
     * @const
     */
    "lifestyle": "lifestyle",
    /**
     * value: "education"
     * @const
     */
    "education": "education",
    /**
     * value: "medical_welfare"
     * @const
     */
    "medical_welfare": "medical_welfare",
    /**
     * value: "other_services"
     * @const
     */
    "other_services": "other_services",
    /**
     * value: "other"
     * @const
     */
    "other": "other"  };

  /**
   * Allowed values for the <code>industry_code</code> property.
   * @enum {String}
   * @readonly
   */
  exports.IndustryCodeEnum = {
    /**
     * value: ""
     * @const
     */
    "empty": "",
    /**
     * value: "transport_delivery"
     * @const
     */
    "transport_delivery": "transport_delivery",
    /**
     * value: "delivery"
     * @const
     */
    "delivery": "delivery",
    /**
     * value: "other_transportation_logistics"
     * @const
     */
    "other_transportation_logistics": "other_transportation_logistics"  };

  /**
   * Allowed values for the <code>workflow_setting</code> property.
   * @enum {String}
   * @readonly
   */
  exports.WorkflowSettingEnum = {
    /**
     * value: "enable"
     * @const
     */
    "enable": "enable",
    /**
     * value: "disable"
     * @const
     */
    "disable": "disable"  };


  return exports;
}));


