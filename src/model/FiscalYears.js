/**
 * freee API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.FreeeAccountingClient) {
      root.FreeeAccountingClient = {};
    }
    root.FreeeAccountingClient.FiscalYears = factory(root.FreeeAccountingClient.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The FiscalYears model module.
   * @module model/FiscalYears
   * @version v0.0.1
   */

  /**
   * Constructs a new <code>FiscalYears</code>.
   * @alias module:model/FiscalYears
   * @class
   * @param useIndustryTemplate {Boolean} 製造業向け機能（true: 使用する、false: 使用しない）
   * @param indirectWriteOffMethod {Boolean} 固定資産の控除法(false: 減価償却累計額でまとめる、true: 独立間接控除方式)
   * @param depreciationRecordMethod {Number} 月次償却（0: しない、1: する）
   * @param taxMethod {Number} 課税区分（0: 免税、1: 簡易課税、2: 本則課税（個別対応方式）、3: 本則課税（一括比例配分方式）、4: 本則課税（全額控除））
   * @param salesTaxBusinessCode {Number} 簡易課税用事業区分（0: 第一種：卸売業、1: 第二種：小売業、2: 第三種：農林水産業、工業、建設業、製造業など、3: 第四種：飲食店業など、4: 第五種：金融・保険業、運輸通信業、サービス業など、5: 第六種：不動産業など
   * @param taxFraction {Number} 消費税端数処理方法（0: 切り捨て、1: 切り上げ、2: 四捨五入）
   * @param taxAccountMethod {Number} 消費税経理処理方法（0: 税込経理、1: 旧税抜経理、2: 税抜経理）
   * @param returnCode {Number} 不動産所得使用区分（0: 一般、1: 一般/不動産） ※個人事業主のみ設定可能
   */
  var exports = function(useIndustryTemplate, indirectWriteOffMethod, depreciationRecordMethod, taxMethod, salesTaxBusinessCode, taxFraction, taxAccountMethod, returnCode) {
    var _this = this;

    _this['use_industry_template'] = useIndustryTemplate;
    _this['indirect_write_off_method'] = indirectWriteOffMethod;


    _this['depreciation_record_method'] = depreciationRecordMethod;
    _this['tax_method'] = taxMethod;
    _this['sales_tax_business_code'] = salesTaxBusinessCode;
    _this['tax_fraction'] = taxFraction;
    _this['tax_account_method'] = taxAccountMethod;
    _this['return_code'] = returnCode;
  };

  /**
   * Constructs a <code>FiscalYears</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FiscalYears} obj Optional instance to populate.
   * @return {module:model/FiscalYears} The populated <code>FiscalYears</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('use_industry_template')) {
        obj['use_industry_template'] = ApiClient.convertToType(data['use_industry_template'], 'Boolean');
      }
      if (data.hasOwnProperty('indirect_write_off_method')) {
        obj['indirect_write_off_method'] = ApiClient.convertToType(data['indirect_write_off_method'], 'Boolean');
      }
      if (data.hasOwnProperty('start_date')) {
        obj['start_date'] = ApiClient.convertToType(data['start_date'], 'String');
      }
      if (data.hasOwnProperty('end_date')) {
        obj['end_date'] = ApiClient.convertToType(data['end_date'], 'String');
      }
      if (data.hasOwnProperty('depreciation_record_method')) {
        obj['depreciation_record_method'] = ApiClient.convertToType(data['depreciation_record_method'], 'Number');
      }
      if (data.hasOwnProperty('tax_method')) {
        obj['tax_method'] = ApiClient.convertToType(data['tax_method'], 'Number');
      }
      if (data.hasOwnProperty('sales_tax_business_code')) {
        obj['sales_tax_business_code'] = ApiClient.convertToType(data['sales_tax_business_code'], 'Number');
      }
      if (data.hasOwnProperty('tax_fraction')) {
        obj['tax_fraction'] = ApiClient.convertToType(data['tax_fraction'], 'Number');
      }
      if (data.hasOwnProperty('tax_account_method')) {
        obj['tax_account_method'] = ApiClient.convertToType(data['tax_account_method'], 'Number');
      }
      if (data.hasOwnProperty('return_code')) {
        obj['return_code'] = ApiClient.convertToType(data['return_code'], 'Number');
      }
    }
    return obj;
  }

  /**
   * 製造業向け機能（true: 使用する、false: 使用しない）
   * @member {Boolean} use_industry_template
   */
  exports.prototype['use_industry_template'] = undefined;
  /**
   * 固定資産の控除法(false: 減価償却累計額でまとめる、true: 独立間接控除方式)
   * @member {Boolean} indirect_write_off_method
   */
  exports.prototype['indirect_write_off_method'] = undefined;
  /**
   * 期首日
   * @member {String} start_date
   */
  exports.prototype['start_date'] = undefined;
  /**
   * 期末日
   * @member {String} end_date
   */
  exports.prototype['end_date'] = undefined;
  /**
   * 月次償却（0: しない、1: する）
   * @member {Number} depreciation_record_method
   */
  exports.prototype['depreciation_record_method'] = undefined;
  /**
   * 課税区分（0: 免税、1: 簡易課税、2: 本則課税（個別対応方式）、3: 本則課税（一括比例配分方式）、4: 本則課税（全額控除））
   * @member {Number} tax_method
   */
  exports.prototype['tax_method'] = undefined;
  /**
   * 簡易課税用事業区分（0: 第一種：卸売業、1: 第二種：小売業、2: 第三種：農林水産業、工業、建設業、製造業など、3: 第四種：飲食店業など、4: 第五種：金融・保険業、運輸通信業、サービス業など、5: 第六種：不動産業など
   * @member {Number} sales_tax_business_code
   */
  exports.prototype['sales_tax_business_code'] = undefined;
  /**
   * 消費税端数処理方法（0: 切り捨て、1: 切り上げ、2: 四捨五入）
   * @member {Number} tax_fraction
   */
  exports.prototype['tax_fraction'] = undefined;
  /**
   * 消費税経理処理方法（0: 税込経理、1: 旧税抜経理、2: 税抜経理）
   * @member {Number} tax_account_method
   */
  exports.prototype['tax_account_method'] = undefined;
  /**
   * 不動産所得使用区分（0: 一般、1: 一般/不動産） ※個人事業主のみ設定可能
   * @member {Number} return_code
   */
  exports.prototype['return_code'] = undefined;



  return exports;
}));


